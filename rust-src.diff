diff --git a/src/liballoc/rc/tests.rs b/src/liballoc/rc/tests.rs
index 6fd3f90935..1c0283f1b3 100644
--- a/src/liballoc/rc/tests.rs
+++ b/src/liballoc/rc/tests.rs
@@ -427,6 +427,7 @@ fn test_downcast() {
 }
 
 #[test]
+#[cfg(not(miri))] // FIXME: Miri does not support const generics
 fn test_array_from_slice() {
     let v = vec![1, 2, 3];
     let r: Rc<[u32]> = Rc::from(v);
diff --git a/src/liballoc/sync/tests.rs b/src/liballoc/sync/tests.rs
index 9220f5e033..8adb5ec384 100644
--- a/src/liballoc/sync/tests.rs
+++ b/src/liballoc/sync/tests.rs
@@ -480,6 +480,7 @@ fn test_downcast() {
 }
 
 #[test]
+#[cfg(not(miri))] // FIXME: Miri does not support const generics
 fn test_array_from_slice() {
     let v = vec![1, 2, 3];
     let r: Arc<[u32]> = Arc::from(v);
diff --git a/src/liballoc/tests.rs b/src/liballoc/tests.rs
index ed46ba8a1b..22d38c70b7 100644
--- a/src/liballoc/tests.rs
+++ b/src/liballoc/tests.rs
@@ -141,6 +141,7 @@ fn boxed_slice_from_iter() {
 }
 
 #[test]
+#[cfg(not(miri))] // FIXME: Miri does not support const generics
 fn test_array_from_slice() {
     let v = vec![1, 2, 3];
     let r: Box<[u32]> = v.into_boxed_slice();
diff --git a/src/liballoc/tests/slice.rs b/src/liballoc/tests/slice.rs
index ad2cd7c95e..165ab98cc0 100644
--- a/src/liballoc/tests/slice.rs
+++ b/src/liballoc/tests/slice.rs
@@ -466,6 +466,7 @@ fn test_sort() {
 }
 
 #[test]
+#[cfg(not(miri))] // FIXME: Miri fails, see https://github.com/rust-random/rand/issues/779.
 fn test_sort_stability() {
     #[cfg(not(miri))] // Miri is too slow
     let large_range = 500..510;
diff --git a/src/libcore/tests/array.rs b/src/libcore/tests/array.rs
index 9e133ac568..35f1da9301 100644
--- a/src/libcore/tests/array.rs
+++ b/src/libcore/tests/array.rs
@@ -20,6 +20,7 @@ fn fixed_size_array() {
 }
 
 #[test]
+#[cfg(not(miri))] // FIXME: Miri does not support const generics
 fn array_try_from() {
     macro_rules! test {
         ($($N:expr)+) => {
